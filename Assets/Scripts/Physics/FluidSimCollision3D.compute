#pragma kernel ExternalForces
#pragma kernel UpdateSpatialHash
#pragma kernel CalculateDensities
#pragma kernel CalculatePressureForce
#pragma kernel CalculateViscosity
#pragma kernel UpdatePositions


#include "./FluidMaths3D.hlsl"
#include "./SpatialHash3D.hlsl"

static const int NumThreads = 64;

// Buffers
RWStructuredBuffer<float3> Positions;
RWStructuredBuffer<float3> PredictedPositions;
RWStructuredBuffer<float3> Velocities;
RWStructuredBuffer<float2> Densities;
RWStructuredBuffer<uint3> SpatialIndices;
RWStructuredBuffer<uint> SpatialOffsets;
StructuredBuffer<float3> Triangles; // Stores vertices of triangles (A, B, C)

// Parameters
const uint numParticles;
const float gravity;
const float3 windDirection;
const float windStrength;
const float deltaTime;
const float collisionDamping;
const float smoothingRadius;
const float targetDensity;
const float pressureMultiplier;
const float nearPressureMultiplier;
const float viscosityStrength;
const float edgeForce;
const float edgeForceDst;
const float3 boundsSize;
const float3 centre;
const float4x4 localToWorld;
const float4x4 worldToLocal;
const float2 interactionInputPoint;
const float interactionInputStrength;
const float interactionInputRadius;
const uint numTriangles;
const float sphereRadius;

float PressureFromDensity(float density)
{
    return (density - targetDensity) * pressureMultiplier;
}

float NearPressureFromDensity(float nearDensity)
{
    return nearDensity * nearPressureMultiplier;
}

bool IsSphereIntersectingTriangle(float3 sphereCenter, float radius, float3 A, float3 B, float3 C)
{
    float3 AB = B - A;
    float3 AC = C - A;
    float3 N = normalize(cross(AB, AC));
    float distance = abs(dot(N, sphereCenter - A));
    if (distance > radius)
    {
        return false;
    }
    float3 P = sphereCenter - distance * N;
    float3 v0 = C - A;
    float3 v1 = B - A;
    float3 v2 = P - A;
    float dot00 = dot(v0, v0);
    float dot01 = dot(v0, v1);
    float dot02 = dot(v0, v2);
    float dot11 = dot(v1, v1);
    float dot12 = dot(v1, v2);
    float invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
    float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    float v = (dot00 * dot12 - dot01 * dot02) * invDenom;
    return (u >= 0) && (v >= 0) && (u + v < 1);
}


bool IsSphereIntersecting(float3 sphereCenter, float radius, uint numTriangles, StructuredBuffer<float3> triangles)
{
    for (uint i = 0; i < numTriangles; i += 3)
    {
        if (IsSphereIntersectingTriangle(sphereCenter, radius, triangles[i], triangles[i + 1], triangles[i + 2]))
        {
            return true;
        }
    }
    return false;
}

void ResolveCollisions(uint particleIndex)
{
    float3 posLocal = mul(worldToLocal, float4(Positions[particleIndex], 1)).xyz;
    float3 velocityLocal = mul(worldToLocal, float4(Velocities[particleIndex], 0)).xyz;
    const float3 halfSize = boundsSize / 2.0f;
    const float3 edgeDst = halfSize - abs(posLocal);
    if (edgeDst.x <= 0)
    {
        posLocal.x = halfSize.x * sign(posLocal.x);
        velocityLocal.x *= -1 * collisionDamping;
    }
    if (edgeDst.y <= 0)
    {
        posLocal.y = halfSize.y * sign(posLocal.y);
        velocityLocal.y *= -1 * collisionDamping;
    }
    if (posLocal.z > halfSize.z)
    {
        posLocal.z = -halfSize.z;
    }
    else if (posLocal.z < -halfSize.z)
    {
        posLocal.z = halfSize.z;
    }
    Positions[particleIndex] = mul(localToWorld, float4(posLocal, 1)).xyz;
    Velocities[particleIndex] = mul(localToWorld, float4(velocityLocal, 0)).xyz;
}

[numthreads(NumThreads, 1, 1)]
void ExternalForces(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    Velocities[id.x] += float3(0, gravity, 0) * deltaTime;
    Velocities[id.x] += windDirection * windStrength * deltaTime;
    PredictedPositions[id.x] = Positions[id.x] + Velocities[id.x] * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void UpdateSpatialHash(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    SpatialOffsets[id.x] = numParticles;
    int3 cell = GetCell3D(PredictedPositions[id.x], smoothingRadius);
    uint hash = HashCell3D(cell);
    uint key = KeyFromHash(hash, numParticles);
    SpatialIndices[id.x] = uint3(id.x, hash, key);
}

[numthreads(NumThreads, 1, 1)]
void CalculateDensities(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    float3 pos = PredictedPositions[id.x];
    int3 originCell = GetCell3D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    float density = 0;
    float nearDensity = 0;
    for (int i = 0; i < 27; i++)
    {
        uint hash = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];
        while (currIndex < numParticles)
        {
            uint3 indexData = SpatialIndices[currIndex];
            currIndex++;
            if (indexData[2] != key)
                break;
            if (indexData[1] != hash)
                continue;
            uint neighbourIndex = indexData[0];
            float3 neighbourPos = PredictedPositions[neighbourIndex];
            float3 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);
            if (sqrDstToNeighbour > sqrRadius)
                continue;
            float dst = sqrt(sqrDstToNeighbour);
            density += DensityKernel(dst, smoothingRadius);
            nearDensity += NearDensityKernel(dst, smoothingRadius);
        }
    }
    Densities[id.x] = float2(density, nearDensity);
}

[numthreads(NumThreads, 1, 1)]
void CalculatePressureForce(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    float density = Densities[id.x][0];
    float densityNear = Densities[id.x][1];
    float pressure = PressureFromDensity(density);
    float nearPressure = NearPressureFromDensity(densityNear);
    float3 pressureForce = 0;
    float3 pos = PredictedPositions[id.x];
    int3 originCell = GetCell3D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    for (int i = 0; i < 27; i++)
    {
        uint hash = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];
        while (currIndex < numParticles)
        {
            uint3 indexData = SpatialIndices[currIndex];
            currIndex++;
            if (indexData[2] != key)
                break;
            if (indexData[1] != hash)
                continue;
            uint neighbourIndex = indexData[0];
            if (neighbourIndex == id.x)
                continue;
            float3 neighbourPos = PredictedPositions[neighbourIndex];
            float3 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);
            if (sqrDstToNeighbour > sqrRadius)
                continue;
            float densityNeighbour = Densities[neighbourIndex][0];
            float nearDensityNeighbour = Densities[neighbourIndex][1];
            float neighbourPressure = PressureFromDensity(densityNeighbour);
            float neighbourPressureNear = NearPressureFromDensity(nearDensityNeighbour);
            float sharedPressure = (pressure + neighbourPressure) / 2;
            float sharedNearPressure = (nearPressure + neighbourPressureNear) / 2;
            float dst = sqrt(sqrDstToNeighbour);
            float3 dir = dst > 0 ? offsetToNeighbour / dst : float3(0, 1, 0);
            pressureForce += dir * DensityDerivative(dst, smoothingRadius) * sharedPressure / densityNeighbour;
            pressureForce += dir * NearDensityDerivative(dst, smoothingRadius) * sharedNearPressure / nearDensityNeighbour;
        }
    }
    float3 acceleration = pressureForce / density;
    Velocities[id.x] += acceleration * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void CalculateViscosity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;
    float3 pos = PredictedPositions[id.x];
    int3 originCell = GetCell3D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    float3 viscosityForce = 0;
    float3 velocity = Velocities[id.x];
    for (int i = 0; i < 27; i++)
    {
        uint hash = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];
        while (currIndex < numParticles)
        {
            uint3 indexData = SpatialIndices[currIndex];
            currIndex++;
            if (indexData[2] != key)
                break;
            if (indexData[1] != hash)
                continue;
            uint neighbourIndex = indexData[0];
            if (neighbourIndex == id.x)
                continue;
            float3 neighbourPos = PredictedPositions[neighbourIndex];
            float3 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);
            if (sqrDstToNeighbour > sqrRadius)
                continue;
            float dst = sqrt(sqrDstToNeighbour);
            float3 neighbourVelocity = Velocities[neighbourIndex];
            viscosityForce += (neighbourVelocity - velocity) * SmoothingKernelPoly6(dst, smoothingRadius);
        }
    }
    Velocities[id.x] += viscosityForce * viscosityStrength * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void UpdatePositions(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles)
        return;

    // Update position based on velocity
    float3 predictedPosition = Positions[id.x] + Velocities[id.x] * deltaTime;

    // Check for collisions with triangles
    bool collisionDetected = false;
    for (uint i = 0; i < numTriangles; i += 3)
    {
        if (IsSphereIntersectingTriangle(predictedPosition, sphereRadius, Triangles[i], Triangles[i + 1], Triangles[i + 2]))
        {
            collisionDetected = false;
            break;
        }
    }

    // Handle collision response
    if (collisionDetected)
    {
        Velocities[id.x] *= -1; // Simple bounce back, can be more complex
    }
    else
    {
        Positions[id.x] = predictedPosition;
    }

    // Resolve collisions with simulation boundaries
    ResolveCollisions(id.x);
}

