#pragma kernel ExternalForces
#pragma kernel UpdateSpatialHash
#pragma kernel CalculateDensities
#pragma kernel CalculatePressureForce
#pragma kernel CalculateViscosity
#pragma kernel UpdatePositions

// Includes
#include "./FluidMaths3D.hlsl"
#include "./SpatialHash3D.hlsl"

static const int NumThreads = 64;

// Buffers
RWStructuredBuffer<float3> Positions;
RWStructuredBuffer<float3> PredictedPositions;
RWStructuredBuffer<float3> Velocities;
RWStructuredBuffer<float2> Densities; // Density, Near Density
RWStructuredBuffer<uint3> SpatialIndices; // used for spatial hashing
RWStructuredBuffer<uint> SpatialOffsets; // used for spatial hashing
StructuredBuffer<float3> Triangles;
RWStructuredBuffer<int> ParticlesShow ;

// Settings
const uint numParticles;
const float gravity;

// Wind Power
const float3 windDirection;
const float windStrength;

const float deltaTime;
const float collisionDamping;
const float smoothingRadius;
const float targetDensity;
const float pressureMultiplier;
const float nearPressureMultiplier;
const float viscosityStrength;
const float edgeForce;
const float edgeForceDst;
const float3 boundsSize;
const float3 centre;

const float4x4 localToWorld;
const float4x4 worldToLocal;

const float2 interactionInputPoint;
const float interactionInputStrength;
const float interactionInputRadius;
const uint numTriangles;
const float sphereRadius;

// Mayar
float distanceToSegmentSquared(float3 point1, float3 v, float3 w)
{
    float3 vw = w - v;
    float3 vp = point1
    -v;
    float t = dot(vp, vw) / dot(vw, vw);
    t = clamp(t, 0.0, 1.0);
    float3 projection = v + t * vw;
    return dot(point1
    -projection, point1
    -projection);
}

bool IsSphereIntersectingTriangle(float3 sphereCenter, float radius, float3 A, float3 B, float3 C)
{
    // Edge vectors
    float3 AB = B - A;
    float3 AC = C - A;

    // Normal of the triangle plane
    float3 N = normalize(cross(AB, AC));

    // Distance from sphere center to the triangle plane
    float distance = dot(N, sphereCenter - A);
    if (abs(distance) > radius)
    {
        return false;
    }

    // Project sphere center onto the triangle plane
    float3 P = sphereCenter - distance * N;

    // Barycentric coordinate check
    float3 v0 = C - A;
    float3 v1 = B - A;
    float3 v2 = P - A;
    float dot00 = dot(v0, v0);
    float dot01 = dot(v0, v1);
    float dot02 = dot(v0, v2);
    float dot11 = dot(v1, v1);
    float dot12 = dot(v1, v2);
    float invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
    float u = (dot11 * dot02 - dot01 * dot12) * invDenom;
    float v = (dot00 * dot12 - dot01 * dot02) * invDenom;

    // If point is in triangle
    if ((u >= 0) && (v >= 0) && (u + v <= 1))
    {
        return true;
    }

    // Check distance from sphere center to the triangle edges
    float radius2 = radius * radius;

    // Check each edge
    if (distanceToSegmentSquared(sphereCenter, A, B) <= radius2)
        return true;
    if (distanceToSegmentSquared(sphereCenter, B, C) <= radius2)
        return true;
    if (distanceToSegmentSquared(sphereCenter, C, A) <= radius2)
        return true;

    // Check distance from sphere center to each vertex
    if (dot(sphereCenter - A, sphereCenter - A) <= radius2)
        return true;
    if (dot(sphereCenter - B, sphereCenter - B) <= radius2)
        return true;
    if (dot(sphereCenter - C, sphereCenter - C) <= radius2)
        return true;

    // If none of the checks returned true, the sphere is not intersecting the triangle
    return false;
}

bool IsSphereIntersecting(float3 sphereCenter, float radius, uint numTriangles, StructuredBuffer<float3> triangles)
{
    for (uint i = 0; i < numTriangles; i += 3)
    {
        if (IsSphereIntersectingTriangle(sphereCenter, radius, triangles[i], triangles[i + 1], triangles[i + 2]))
        {
            return true;
        }
    }
    return false;
}

// for regenerate 

float hash(float n)
{
    return frac(sin(n) * 43758.5453123);
}




float PressureFromDensity(float density)
{
    return (density - targetDensity) * pressureMultiplier;
}

float NearPressureFromDensity(float nearDensity)
{
    return nearDensity * nearPressureMultiplier;
}

void ResolveCollisions(uint particleIndex)
{
    // Transform position/velocity to the local space of the bounding box (scale not included)
    float3 posLocal = mul(worldToLocal, float4(Positions[particleIndex], 1)).xyz;
    float3 velocityLocal = mul(worldToLocal, float4(Velocities[particleIndex], 0)).xyz;

    // Calculate distance from box on each axis (negative values are inside box)
    const float3 halfSize = 0.5f;
    const float3 edgeDst = halfSize - abs(posLocal);

    // Get the sphere center for the current particle
    float3 sphereCenter = Positions[particleIndex];
    // Check for intersections with triangles
    bool intersects = IsSphereIntersecting(sphereCenter, sphereRadius, numTriangles, Triangles);

    // Reflect velocity and apply damping if intersection detected
   // Resolve aerodynamic collision
    if (intersects)
    {
        float3 normal = normalize(sphereCenter); // Get the normal of the collision surface
  
          // Relative velocity   اشرحيلنا line by line 
        float3 relativeVelocity = velocityLocal;
  
          // Compute tangential and normal components of the velocity
        float3 tangentialVelocity = relativeVelocity - dot(relativeVelocity, normal) * normal;
        float3 normalVelocity = dot(relativeVelocity, normal) * normal;
  
          // Calculate lift and drag forces
        float3 lift = cross(relativeVelocity, normal) * 0.05f; // Adjust the lift coefficient as needed
        float3 drag = -normalVelocity * 0.1f; // Adjust the drag coefficient as needed
  
          // Update the velocity
        velocityLocal += lift + drag;
          
          // Optionally, update the position slightly to avoid sticking to the surface
        posLocal += normal * 0.03f; // Small offset to move it away from the surface
        ParticlesShow[particleIndex] = 1;
        Positions[particleIndex] = mul(localToWorld, float4(posLocal, 1)).xyz;
        Velocities[particleIndex] = mul(localToWorld, float4(velocityLocal, 0)).xyz;
    }
    //else
    //{
    //    ParticlesShow[particleIndex] = 0;
    //    Positions[particleIndex] = mul(localToWorld, float4(posLocal, 1)).xyz;
    //    Velocities[particleIndex] = mul(localToWorld, float4(velocityLocal, 0)).xyz;
    //}
    //if (intersects)
    //{
       
    //    float3 normal = normalize(sphereCenter);
    //    float3 reflectedVelocity = reflect(velocityLocal, normal /2);
    //    float3 parallelVelocity = velocityLocal - dot(velocityLocal, normal);
        
    //    float blendFactor = 0.5f;
    //    //velocityLocal = lerp(reflectedVelocity, parallelVelocity, blendFactor);
    //    velocityLocal = reflectedVelocity;
    //    velocityLocal *= collisionDamping; // Apply collision damping
    //    ParticlesShow[particleIndex] = 1;
    //    Positions[particleIndex] = mul(localToWorld, float4(posLocal, 1)).xyz;
    //    Velocities[particleIndex] = mul(localToWorld, float4(velocityLocal, 0)).xyz;
        
    //}
    
    
    
        // Resolve collisions on the x and y axes (bounce back)
        if (edgeDst.x <= 0)
        {
            posLocal.x = halfSize.x * sign(posLocal.x);
            velocityLocal.x *= -1 * collisionDamping;
         // Transform resolved position/velocity back to world space
        Positions[particleIndex] = mul(localToWorld, float4(posLocal, 1)).xyz;
        Velocities[particleIndex] = mul(localToWorld, float4(velocityLocal, 0)).xyz;
    }
        if (edgeDst.y <= 0)
        {
            posLocal.y = halfSize.y * sign(posLocal.y);
            velocityLocal.y *= -1 * collisionDamping;
         // Transform resolved position/velocity back to world space
        Positions[particleIndex] = mul(localToWorld, float4(posLocal, 1)).xyz;
        Velocities[particleIndex] = mul(localToWorld, float4(velocityLocal, 0)).xyz;
    }

    // Wrapping behavior on the z axis
        if (posLocal.z > halfSize.z)
        {
            posLocal.z = -halfSize.z;
        // Generate a random seed based on the particle index
        float seed = particleIndex * 12.9898 + 78.233;

// Generate random numbers for each component
        float randX = hash(seed);
        float randY = hash(seed + 1.0);
        float randZ = hash(seed + 2.0);

// Scale and offset to the desired ranges
        float randomX = lerp(-2.0, 2.0, randX);
        float randomY = lerp(-2.5, -1.0, floor(randY * 10.0) * 0.4);
        float randomZ = lerp(-19.0, -17.0, randZ);

        Positions[particleIndex] = float3(randomX, randomY, randomZ);
        Velocities[particleIndex] = float3(0, 0, 10);
        return;
            
        
        }
        else if (posLocal.z < -halfSize.z)
        {
            posLocal.z = halfSize.z;
        // Generate a random seed based on the particle index
        float seed = particleIndex * 12.9898 + 78.233;

// Generate random numbers for each component
        float randX = hash(seed);
        float randY = hash(seed + 1.0);
        float randZ = hash(seed + 2.0);

// Scale and offset to the desired ranges
        float randomX = lerp(-3.0, 2.0, randX);
        float randomY = lerp(-6.0, -1.0, floor(randY * 10.0) * 0.4);
        float randomZ = lerp(-19.0, -17.0, randZ);

        Positions[particleIndex] = float3(randomX, randomY, randomZ);
        Velocities[particleIndex] = float3(0 ,0 , 10);
        return;
        
    }
    
    


   
}


[numthreads(NumThreads, 1, 1)]
void ExternalForces(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    // External forces (gravity)
    Velocities[id.x] += float3(0, gravity, 0) * deltaTime;

    // External forces (wind)
    Velocities[0] += windDirection * windStrength *  deltaTime;

    // Predict
    PredictedPositions[id.x] = Positions[id.x] + Velocities[id.x] * 1 / 120.0;
}

[numthreads(NumThreads, 1, 1)]
void UpdateSpatialHash(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    // Reset offsets
    SpatialOffsets[id.x] = numParticles;
    // Update index buffer
    uint index = id.x;
    int3 cell = GetCell3D(PredictedPositions[index], smoothingRadius);
    uint hash = HashCell3D(cell);
    uint key = KeyFromHash(hash, numParticles);
    SpatialIndices[id.x] = uint3(index, hash, key);
}

[numthreads(NumThreads, 1, 1)]
void CalculateDensities(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    float3 pos = PredictedPositions[id.x];
    int3 originCell = GetCell3D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;
    float density = 0;
    float nearDensity = 0;

    // Neighbour search
    for (int i = 0; i < 27; i++)
    {
        uint hash = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint3 indexData = SpatialIndices[currIndex];
            currIndex++;
            // Exit if no longer looking at correct bin
            if (indexData[2] != key) break;
            // Skip if hash does not match
            if (indexData[1] != hash) continue;

            uint neighbourIndex = indexData[0];
            float3 neighbourPos = PredictedPositions[neighbourIndex];
            float3 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            // Skip if not within radius
            if (sqrDstToNeighbour > sqrRadius) continue;

            // Calculate density and near density
            float dst = sqrt(sqrDstToNeighbour);
            density += DensityKernel(dst, smoothingRadius);
            nearDensity += NearDensityKernel(dst, smoothingRadius);
        }
    }

    Densities[id.x] = float2(density, nearDensity);
}

[numthreads(NumThreads, 1, 1)]
void CalculatePressureForce(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    // Calculate pressure
    float density = Densities[id.x][0];
    float densityNear = Densities[id.x][1];
    float pressure = PressureFromDensity(density);
    float nearPressure = NearPressureFromDensity(densityNear);
    float3 pressureForce = 0;

    float3 pos = PredictedPositions[id.x];
    int3 originCell = GetCell3D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;

    // Neighbour search
    for (int i = 0; i < 27; i++)
    {
        uint hash = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint3 indexData = SpatialIndices[currIndex];
            currIndex++;
            // Exit if no longer looking at correct bin
            if (indexData[2] != key) break;
            // Skip if hash does not match
            if (indexData[1] != hash) continue;

            uint neighbourIndex = indexData[0];
            // Skip if looking at self
            if (neighbourIndex == id.x) continue;

            float3 neighbourPos = PredictedPositions[neighbourIndex];
            float3 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            // Skip if not within radius
            if (sqrDstToNeighbour > sqrRadius) continue;

            // Calculate pressure force
            float densityNeighbour = Densities[neighbourIndex][0];
            float nearDensityNeighbour = Densities[neighbourIndex][1];
            float neighbourPressure = PressureFromDensity(densityNeighbour);
            float neighbourPressureNear = NearPressureFromDensity(nearDensityNeighbour);

            float sharedPressure = (pressure + neighbourPressure) / 2;
            float sharedNearPressure = (nearPressure + neighbourPressureNear) / 2;

            float dst = sqrt(sqrDstToNeighbour);
            float3 dir = dst > 0 ? offsetToNeighbour / dst : float3(0, 1, 0);

            pressureForce += dir * DensityDerivative(dst, smoothingRadius) * sharedPressure / densityNeighbour;
            pressureForce += dir * NearDensityDerivative(dst, smoothingRadius) * sharedNearPressure / nearDensityNeighbour;
        }
    }

    float3 acceleration = pressureForce / density;
    Velocities[id.x] += acceleration * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void CalculateViscosity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    float3 pos = PredictedPositions[id.x];
    int3 originCell = GetCell3D(pos, smoothingRadius);
    float sqrRadius = smoothingRadius * smoothingRadius;

    float3 viscosityForce = 0;
    float3 velocity = Velocities[id.x];

    // Neighbour search
    for (int i = 0; i < 27; i++)
    {
        uint hash = HashCell3D(originCell + offsets3D[i]);
        uint key = KeyFromHash(hash, numParticles);
        uint currIndex = SpatialOffsets[key];

        while (currIndex < numParticles)
        {
            uint3 indexData = SpatialIndices[currIndex];
            currIndex++;
            // Exit if no longer looking at correct bin
            if (indexData[2] != key) break;
            // Skip if hash does not match
            if (indexData[1] != hash) continue;

            uint neighbourIndex = indexData[0];
            // Skip if looking at self
            if (neighbourIndex == id.x) continue;

            float3 neighbourPos = PredictedPositions[neighbourIndex];
            float3 offsetToNeighbour = neighbourPos - pos;
            float sqrDstToNeighbour = dot(offsetToNeighbour, offsetToNeighbour);

            // Skip if not within radius
            if (sqrDstToNeighbour > sqrRadius) continue;

            // Calculate viscosity
            float dst = sqrt(sqrDstToNeighbour);
            float3 neighbourVelocity = Velocities[neighbourIndex];
            viscosityForce += (neighbourVelocity - velocity) * SmoothingKernelPoly6(dst, smoothingRadius);
        }
    }
    Velocities[id.x] += viscosityForce * viscosityStrength * deltaTime;
}

[numthreads(NumThreads, 1, 1)]
void UpdatePositions(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    Positions[id.x] += Velocities[id.x] * deltaTime;
    ResolveCollisions(id.x);
}
